#!/bin/bash

# ===================================================================================
# manage-disk - 디스크 관리 도구
# ===================================================================================

set -euo pipefail

# 경로 설정
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -d "$SCRIPT_DIR/../lib" ]]; then
    LIB_DIR="$SCRIPT_DIR/../lib"
else
    LIB_DIR="/usr/local/lib/ubuntu-raid-cli"
fi

# 라이브러리 로드
# shellcheck source=lib/common.sh
source "$LIB_DIR/common.sh"
# shellcheck source=lib/ui-functions.sh
source "$LIB_DIR/ui-functions.sh"
# shellcheck source=lib/disk-functions.sh
source "$LIB_DIR/disk-functions.sh"

# 공통 초기화
init_common

# ===================================================================================
# 명령어 함수들
# ===================================================================================

cmd_list() {
    local show_all=false
    local format="table"
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all|-a)
                show_all=true
                shift
                ;;
            --format|-f)
                format="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "list" "디스크 및 마운트 상태를 표시합니다" \
                "manage-disk list [옵션]" \
                "  -a, --all     모든 디스크 표시 (파티션 포함)
  -f, --format  출력 형식 (table, simple, json)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    print_header "디스크 및 마운트 상태"
    
    case "$format" in
        "table")
            table_start "디스크 마운트 정보"
            table_row "디바이스" "크기" "파일시스템" "마운트포인트" "상태"
            table_separator
            
            # lsblk를 사용하여 디스크 정보 수집
            lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT,TYPE | tail -n +2 | while read -r name size fstype mountpoint type; do
                # 필터링 (파티션 또는 디스크만)
                if [[ "$show_all" == "true" ]] || [[ "$type" == "part" ]] || [[ "$type" == "disk" && -z "$mountpoint" ]]; then
                    local device="/dev/$name"
                    local status="사용가능"
                    
                    # 상태 결정
                    if [[ -n "$mountpoint" ]]; then
                        status="마운트됨"
                    elif [[ "$fstype" == "linux_raid_member" ]]; then
                        status="RAID멤버"
                    elif [[ "$fstype" == "swap" ]]; then
                        status="스왑"
                    elif [[ -z "$fstype" ]]; then
                        status="미포맷"
                    fi
                    
                    table_row "$name" "$size" "${fstype:-없음}" "${mountpoint:-없음}" "$status"
                fi
            done
            
            table_end
            ;;
        "simple")
            lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT
            ;;
        "json")
            lsblk -J -o NAME,SIZE,FSTYPE,MOUNTPOINT,TYPE
            ;;
        *)
            print_error "지원하지 않는 형식: $format"
            return 1
            ;;
    esac
}

cmd_mount() {
    local device=""
    local mountpoint=""
    local fstype=""
    local options="defaults"
    local interactive=true
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --device|-d)
                device="$2"
                interactive=false
                shift 2
                ;;
            --mount|-m)
                mountpoint="$2"
                shift 2
                ;;
            --fstype|-f)
                fstype="$2"
                shift 2
                ;;
            --options|-o)
                options="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "mount" "디스크를 마운트합니다" \
                "manage-disk mount [옵션]" \
                "  -d, --device     장치 경로
  -m, --mount      마운트 포인트
  -f, --fstype     파일시스템 타입
  -o, --options    마운트 옵션 (기본: defaults)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    # 관리자 권한 확인
    check_root_privileges "디스크 마운트" || return 1
    
    if [[ "$interactive" == "true" ]]; then
        mount_disk_interactive
    else
        if [[ -z "$device" || -z "$mountpoint" ]]; then
            print_error "장치와 마운트 포인트를 지정해야 합니다"
            return 1
        fi
        
        mount_disk_direct "$device" "$mountpoint" "$fstype" "$options"
    fi
}

cmd_umount() {
    local target=""
    local interactive=true
    local force=false
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --target|-t)
                target="$2"
                interactive=false
                shift 2
                ;;
            --force|-f)
                force=true
                shift
                ;;
            --help|-h)
                show_command_help "umount" "디스크를 언마운트합니다" \
                "manage-disk umount [옵션]" \
                "  -t, --target    언마운트할 장치 또는 마운트 포인트
  -f, --force     강제 언마운트"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    # 관리자 권한 확인
    check_root_privileges "디스크 언마운트" || return 1
    
    if [[ "$interactive" == "true" ]]; then
        umount_disk_interactive "$force"
    else
        if [[ -z "$target" ]]; then
            print_error "언마운트할 대상을 지정해야 합니다"
            return 1
        fi
        
        umount_disk_direct "$target" "$force"
    fi
}

cmd_info() {
    local device=""
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --device|-d)
                device="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "info" "디스크 상세 정보를 표시합니다" \
                "manage-disk info [옵션]" \
                "  -d, --device    정보를 확인할 장치"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    if [[ -z "$device" ]]; then
        # interactive 모드로 장치 선택
        show_disk_info_interactive
    else
        show_disk_info_direct "$device"
    fi
}

# ===================================================================================
# 핵심 기능 구현
# ===================================================================================

mount_disk_interactive() {
    print_header "디스크 마운트 (Interactive)"
    
    # 1. 마운트 가능한 디스크 목록 표시
    local unmounted_disks
    unmounted_disks=$(get_unmounted_disks)
    
    if [[ -z "$unmounted_disks" ]]; then
        print_info "마운트할 수 있는 디스크가 없습니다"
        return 0
    fi
    
    echo "마운트 가능한 디스크:"
    local disk_array=()
    local count=1
    
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        local device="/dev/${line%% *}"
        local info=($line)
        local size="${info[1]:-Unknown}"
        local fstype="${info[2]:-Unknown}"
        
        disk_array+=("$device")
        printf "%2d) %s (%s, %s)\n" $count "$device" "$size" "$fstype"
        ((count++))
    done <<< "$unmounted_disks"
    
    # 2. 디스크 선택
    local choice
    choice=$(get_user_choice "마운트할 디스크를 선택하세요" "${#disk_array[@]}")
    local selected_device="${disk_array[$((choice-1))]}"
    
    # 3. 마운트 포인트 입력
    local mountpoint
    while true; do
        read -r -p "마운트 포인트 (예: /mnt/disk1): " mountpoint
        
        if [[ -z "$mountpoint" ]]; then
            print_error "마운트 포인트를 입력해야 합니다"
            continue
        fi
        
        if [[ "$mountpoint" != /* ]]; then
            print_error "절대 경로를 입력해야 합니다 (/로 시작)"
            continue
        fi
        
        if findmnt "$mountpoint" &>/dev/null; then
            print_error "이미 사용 중인 마운트 포인트입니다"
            continue
        fi
        
        break
    done
    
    # 4. 파일시스템 타입 확인
    local fstype
    fstype=$(lsblk -n -o FSTYPE "$selected_device" 2>/dev/null | grep -v '^$' | head -1)
    
    if [[ -z "$fstype" ]]; then
        print_warning "파일시스템을 감지할 수 없습니다"
        read -r -p "파일시스템 타입을 입력하세요 (기본: auto): " fstype
        fstype="${fstype:-auto}"
    else
        print_success "감지된 파일시스템: $fstype"
    fi
    
    # 5. 마운트 옵션
    local options="defaults"
    read -r -p "추가 마운트 옵션 (기본: defaults): " custom_options
    if [[ -n "$custom_options" ]]; then
        options="defaults,$custom_options"
    fi
    
    # 6. 마운트 실행
    mount_disk_direct "$selected_device" "$mountpoint" "$fstype" "$options"
}

mount_disk_direct() {
    local device="$1"
    local mountpoint="$2"
    local fstype="${3:-auto}"
    local options="${4:-defaults}"
    
    print_info "마운트 중: $device → $mountpoint"
    
    # 마운트 포인트 생성
    if [[ ! -d "$mountpoint" ]]; then
        if mkdir -p "$mountpoint"; then
            print_success "마운트 포인트 생성: $mountpoint"
        else
            print_error "마운트 포인트 생성 실패: $mountpoint"
            return 1
        fi
    fi
    
    # 마운트 실행
    local mount_cmd="mount"
    [[ "$fstype" != "auto" ]] && mount_cmd+=" -t $fstype"
    [[ "$options" != "defaults" ]] && mount_cmd+=" -o $options"
    mount_cmd+=" $device $mountpoint"
    
    if safe_execute "$mount_cmd"; then
        print_success "마운트 완료: $device → $mountpoint"
        
        # 마운트 확인
        if findmnt "$mountpoint" &>/dev/null; then
            local mount_info
            mount_info=$(findmnt -n -o SOURCE,FSTYPE,OPTIONS "$mountpoint")
            print_info "마운트 정보: $mount_info"
        fi
        
        return 0
    else
        print_error "마운트 실패: $device"
        return 1
    fi
}

umount_disk_interactive() {
    local force="${1:-false}"
    
    print_header "디스크 언마운트 (Interactive)"
    
    # 마운트된 디스크 목록 표시
    local mounted_disks
    mounted_disks=$(get_mounted_disks)
    
    if [[ -z "$mounted_disks" ]]; then
        print_info "언마운트할 수 있는 디스크가 없습니다"
        return 0
    fi
    
    echo "마운트된 디스크:"
    local mount_array=()
    local count=1
    
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        mount_array+=("$line")
        local device=$(echo "$line" | awk '{print $1}')
        local mountpoint=$(echo "$line" | awk '{print $2}')
        local fstype=$(echo "$line" | awk '{print $3}')
        
        printf "%2d) %s → %s (%s)\n" $count "$device" "$mountpoint" "$fstype"
        ((count++))
    done <<< "$mounted_disks"
    
    # 선택
    local choice
    choice=$(get_user_choice "언마운트할 디스크를 선택하세요" "${#mount_array[@]}")
    local selected_line="${mount_array[$((choice-1))]}"
    local mountpoint=$(echo "$selected_line" | awk '{print $2}')
    
    umount_disk_direct "$mountpoint" "$force"
}

umount_disk_direct() {
    local target="$1"
    local force="${2:-false}"
    
    print_info "언마운트 중: $target"
    
    # 언마운트 명령어 구성
    local umount_cmd="umount"
    [[ "$force" == "true" ]] && umount_cmd+=" -f"
    umount_cmd+=" $target"
    
    if safe_execute "$umount_cmd"; then
        print_success "언마운트 완료: $target"
        return 0
    else
        print_error "언마운트 실패: $target"
        
        if [[ "$force" != "true" ]]; then
            if confirm_action "강제 언마운트를 시도하시겠습니까?"; then
                umount_disk_direct "$target" "true"
            fi
        fi
        
        return 1
    fi
}

show_disk_info_interactive() {
    print_header "디스크 정보 조회 (Interactive)"
    
    # 모든 디스크 목록 표시
    local all_disks
    all_disks=$(lsblk -d -n -o NAME,SIZE,TYPE | grep disk)
    
    if [[ -z "$all_disks" ]]; then
        print_info "조회할 디스크가 없습니다"
        return 0
    fi
    
    echo "시스템 디스크:"
    local disk_array=()
    local count=1
    
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        local device="/dev/${line%% *}"
        local info=($line)
        local size="${info[1]:-Unknown}"
        
        disk_array+=("$device")
        printf "%2d) %s (%s)\n" $count "$device" "$size"
        ((count++))
    done <<< "$all_disks"
    
    # 선택
    local choice
    choice=$(get_user_choice "정보를 확인할 디스크를 선택하세요" "${#disk_array[@]}")
    local selected_device="${disk_array[$((choice-1))]}"
    
    show_disk_info_direct "$selected_device"
}

show_disk_info_direct() {
    local device="$1"
    
    print_header "디스크 정보: $device"
    
    # 기본 정보
    table_start "기본 정보"
    
    local size
    size=$(get_disk_size "$device")
    if [[ -n "$size" ]]; then
        local size_human
        size_human=$(format_disk_size "$size")
        table_row "크기" "$size_human ($size bytes)"
    fi
    
    # lsblk 정보
    local disk_info
    disk_info=$(lsblk -o NAME,SIZE,TYPE,FSTYPE,MOUNTPOINT,UUID "$device" 2>/dev/null)
    if [[ -n "$disk_info" ]]; then
        echo "$disk_info" | tail -n +2 | while read -r name size type fstype mountpoint uuid; do
            table_row "이름" "$name"
            table_row "크기" "$size"
            table_row "타입" "$type"
            [[ -n "$fstype" ]] && table_row "파일시스템" "$fstype"
            [[ -n "$mountpoint" ]] && table_row "마운트 포인트" "$mountpoint"
            [[ -n "$uuid" ]] && table_row "UUID" "$uuid"
        done
    fi
    
    table_end
    
    # SMART 정보 (선택적)
    if command -v smartctl &> /dev/null; then
        echo ""
        print_info "SMART 상태 확인 중..."
        
        if check_disk_smart "$device" "true"; then
            print_success "SMART 상태: 정상"
        else
            print_warning "SMART 상태: 확인 필요"
        fi
    fi
    
    # 파티션 정보
    local partitions
    partitions=$(lsblk -n -o NAME "$device" | tail -n +2)
    
    if [[ -n "$partitions" ]]; then
        echo ""
        table_start "파티션 정보"
        table_row "파티션" "크기" "파일시스템" "마운트포인트"
        table_separator
        
        while IFS= read -r partition; do
            [[ -z "$partition" ]] && continue
            local part_device="/dev/$partition"
            local part_info
            part_info=$(lsblk -n -o SIZE,FSTYPE,MOUNTPOINT "$part_device" 2>/dev/null)
            if [[ -n "$part_info" ]]; then
                read -r part_size part_fstype part_mount <<< "$part_info"
                table_row "$partition" "$part_size" "${part_fstype:-없음}" "${part_mount:-없음}"
            fi
        done <<< "$partitions"
        
        table_end
    fi
}

# ===================================================================================
# 유틸리티 함수
# ===================================================================================

get_unmounted_disks() {
    lsblk -n -o NAME,SIZE,FSTYPE,MOUNTPOINT,TYPE | while read -r name size fstype mountpoint type; do
        # 파티션이고 마운트되지 않은 것만
        if [[ "$type" == "part" && -z "$mountpoint" && -n "$fstype" && "$fstype" != "linux_raid_member" ]]; then
            echo "$name $size $fstype"
        fi
    done
}

get_mounted_disks() {
    findmnt -D -o SOURCE,TARGET,FSTYPE | tail -n +2 | while read -r source target fstype; do
        # /dev로 시작하는 실제 디스크만
        if [[ "$source" =~ ^/dev/ ]]; then
            echo "$source $target $fstype"
        fi
    done
}

show_usage() {
    cat << 'EOF'

manage-disk - 디스크 관리 도구

사용법:
  manage-disk <command> [options]

명령어:
  list             디스크 및 마운트 상태 표시
  mount            디스크 마운트 (interactive 또는 명령줄)
  umount           디스크 언마운트 (interactive 또는 명령줄)
  info             디스크 상세 정보 표시

옵션:
  --help, -h       도움말 표시

Interactive 모드 (권장):
  manage-disk mount       # 단계별 안내로 마운트
  manage-disk umount      # 목록에서 선택하여 언마운트
  manage-disk info        # 디스크 선택하여 정보 확인

명령줄 모드:
  manage-disk mount -d /dev/sdb1 -m /mnt/data
  manage-disk umount -t /mnt/data
  manage-disk info -d /dev/sdb

예시:
  manage-disk list                              # 전체 디스크 상태
  manage-disk mount                             # interactive 마운트
  manage-disk umount --force                    # interactive 강제 언마운트
  manage-disk info -d /dev/sdb                  # sdb 디스크 정보

EOF
}

# ===================================================================================
# 메인 함수
# ===================================================================================

main() {
    # 기본 명령어 (인수 없을 때)
    if [[ $# -eq 0 ]]; then
        cmd_list
        return $?
    fi
    
    # 명령어 파싱
    local command="$1"
    shift
    
    case "$command" in
        "list"|"ls")
            cmd_list "$@"
            ;;
        "mount")
            cmd_mount "$@"
            ;;
        "umount"|"unmount")
            cmd_umount "$@"
            ;;
        "info"|"information")
            cmd_info "$@"
            ;;
        "help"|"--help"|"-h")
            show_usage
            ;;
        *)
            print_error "알 수 없는 명령어: $command"
            echo
            show_usage
            return 1
            ;;
    esac
}

# 스크립트 실행
main "$@" 