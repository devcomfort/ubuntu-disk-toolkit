#!/bin/bash

# ===================================================================================
# manage-fstab - fstab 관리 도구
# ===================================================================================

set -euo pipefail

# 경로 설정
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -d "$SCRIPT_DIR/../lib" ]]; then
    LIB_DIR="$SCRIPT_DIR/../lib"
else
    LIB_DIR="/usr/local/lib/ubuntu-raid-cli"
fi

# 라이브러리 로드
# shellcheck source=lib/common.sh
source "$LIB_DIR/common.sh"
# shellcheck source=lib/ui-functions.sh
source "$LIB_DIR/ui-functions.sh"
# shellcheck source=lib/fstab-functions.sh
source "$LIB_DIR/fstab-functions.sh"

# 공통 초기화
init_common

# ===================================================================================
# 명령어 함수들
# ===================================================================================

cmd_list() {
    local format="table"
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --format|-f)
                format="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "list" "fstab 항목 목록을 표시합니다" \
                "manage-fstab list [옵션]" \
                "  -f, --format    출력 형식 (table, detailed, json)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    analyze_fstab "$FSTAB_FILE" "$format"
}

cmd_add() {
    local device=""
    local mountpoint=""
    local fstype=""
    local options="defaults"
    local interactive=true
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --device|-d)
                device="$2"
                interactive=false
                shift 2
                ;;
            --mount|-m)
                mountpoint="$2"
                shift 2
                ;;
            --fstype|-f)
                fstype="$2"
                shift 2
                ;;
            --options|-o)
                options="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "add" "fstab에 새 항목을 추가합니다" \
                "manage-fstab add [옵션]" \
                "  -d, --device     장치 경로
  -m, --mount      마운트 포인트
  -f, --fstype     파일시스템 타입
  -o, --options    마운트 옵션 (기본: defaults)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    if [[ "$interactive" == "true" ]]; then
        add_fstab_entry_interactive
    else
        # 필수 매개변수 확인
        if [[ -z "$device" || -z "$mountpoint" ]]; then
            print_error "장치와 마운트 포인트를 지정해야 합니다"
            print_info "interactive 모드: manage-fstab add"
            print_info "명령줄 모드: manage-fstab add -d /dev/sdb1 -m /mnt/data"
            return 1
        fi
        
        # 파일시스템 자동 감지
        if [[ -z "$fstype" ]]; then
            fstype=$(lsblk -n -o FSTYPE "$device" 2>/dev/null | grep -v '^$' | head -1)
            fstype="${fstype:-auto}"
        fi
        
        add_fstab_entry "$device" "$mountpoint" "$fstype" "$options"
    fi
}

cmd_remove() {
    local mountpoint=""
    local interactive=true
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mount|-m)
                mountpoint="$2"
                interactive=false
                shift 2
                ;;
            --help|-h)
                show_command_help "remove" "fstab에서 항목을 제거합니다" \
                "manage-fstab remove [옵션]" \
                "  -m, --mount    제거할 마운트 포인트"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    if [[ "$interactive" == "true" ]]; then
        remove_fstab_entry_interactive
    else
        if [[ -z "$mountpoint" ]]; then
            print_error "마운트 포인트를 지정해야 합니다"
            return 1
        fi
        
        remove_fstab_entry "$mountpoint"
    fi
}

cmd_validate() {
    local fstab_file="$FSTAB_FILE"
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --file|-f)
                fstab_file="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "validate" "fstab 파일의 유효성을 검사합니다" \
                "manage-fstab validate [옵션]" \
                "  -f, --file    검사할 fstab 파일 (기본: /etc/fstab)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    validate_fstab "$fstab_file"
}

cmd_test() {
    local fstab_file="$FSTAB_FILE"
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --file|-f)
                fstab_file="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "test" "fstab 항목들을 테스트 마운트합니다" \
                "manage-fstab test [옵션]" \
                "  -f, --file    테스트할 fstab 파일 (기본: /etc/fstab)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    # 관리자 권한 확인
    check_root_privileges "fstab 테스트 마운트" || return 1
    
    test_fstab_mount "$fstab_file"
}

cmd_backup() {
    local backup_location=""
    
    # 옵션 파싱
    while [[ $# -gt 0 ]]; do
        case $1 in
            --location|-l)
                backup_location="$2"
                shift 2
                ;;
            --help|-h)
                show_command_help "backup" "fstab 파일을 백업합니다" \
                "manage-fstab backup [옵션]" \
                "  -l, --location    백업 위치 (기본: 자동)"
                return 0
                ;;
            *)
                print_error "알 수 없는 옵션: $1"
                return 1
                ;;
        esac
    done
    
    if [[ -n "$backup_location" ]]; then
        if cp "$FSTAB_FILE" "$backup_location"; then
            print_success "fstab 백업 완료: $backup_location"
        else
            print_error "fstab 백업 실패"
            return 1
        fi
    else
        local backup_file
        backup_file=$(create_backup "$FSTAB_FILE")
        if [[ $? -eq 0 ]]; then
            print_info "백업 위치: $backup_file"
        fi
    fi
}

show_usage() {
    cat << 'EOF'

manage-fstab - fstab 관리 도구

사용법:
  manage-fstab <command> [options]

명령어:
  list             fstab 항목 목록 표시
  add              새 항목 추가 (interactive 또는 명령줄)
  remove           항목 제거 (interactive 또는 명령줄)
  validate         fstab 파일 유효성 검사
  test             fstab 항목 테스트 마운트
  backup           fstab 파일 백업

옵션:
  --help, -h       도움말 표시

Interactive 모드 (권장):
  manage-fstab add        # 단계별 안내로 항목 추가
  manage-fstab remove     # 목록에서 선택하여 항목 제거

명령줄 모드:
  manage-fstab add -d /dev/sdb1 -m /mnt/data -f ext4
  manage-fstab remove -m /mnt/data

안전 기능:
  - 자동 백업 생성
  - fail-safe 옵션 권장
  - 테스트 마운트 지원
  - 유효성 검사

EOF
}

# ===================================================================================
# 메인 함수
# ===================================================================================

main() {
    # 기본 명령어 (인수 없을 때)
    if [[ $# -eq 0 ]]; then
        cmd_list
        return $?
    fi
    
    # 명령어 파싱
    local command="$1"
    shift
    
    case "$command" in
        "list"|"show")
            cmd_list "$@"
            ;;
        "add"|"create")
            cmd_add "$@"
            ;;
        "remove"|"delete"|"rm")
            cmd_remove "$@"
            ;;
        "validate"|"check")
            cmd_validate "$@"
            ;;
        "test"|"mount-test")
            cmd_test "$@"
            ;;
        "backup"|"bak")
            cmd_backup "$@"
            ;;
        "help"|"--help"|"-h")
            show_usage
            ;;
        *)
            print_error "알 수 없는 명령어: $command"
            echo
            show_usage
            return 1
            ;;
    esac
}

# 스크립트 실행
main "$@" 