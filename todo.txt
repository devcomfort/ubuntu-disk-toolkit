# Ubuntu Disk Toolkit - 테스트 신뢰성 개선 계획

## 📋 기본 요구사항 (사용자 제공)

다음의 테스트를 식별하고, 테스트 투명성 및 신뢰성을 확보할 수 있도록 인사이트를 제공해줘.
1) 신뢰성을 확보하는데 기여하지 않는 테스트
   모킹(합성 데이터)을 사용함으로서 신뢰도를 확보할 수 없게 된 더미-테스트.
   다음의 예시들은 모의 데이터를 사용하는 대신 임시 파일 또는 실제 명령을 통한 개선이 가능한 사례임:
   1-1) blkid 파싱하는 테스트의 경우, 실제 디스크 리스트를 출력하더라도 디스크에 1개 이상의 데이터가 존재하면 상관 없음.
        이 경우는 모킹을 사용해도 무관하나, 개발자는 모킹 또한 '관리해야 하는 코드'라고 생각함.
   1-2) fstab을 수정하는 테스트의 경우, 임시 파일을 생성하여 파일을 성공적으로 조작하는지에 대한 테스트를 수행할 수 있음.
        즉, fixture나 임시 파일을 사용하고 teardown 과정에서 제거하는 형식의 로직을 구현할 수 있음.
   모킹을 사용하는 것이 좋은 경우도 있지만, 데이터의 변화에 대한 검사, 데이터 해석에 대한 검사 등
   모킹 없이 재현 불가한 경우에 사용하고, 모킹을 사용하도 실제 환경에 대해 테스트 할 수 없다면 샌드박싱까지 고려하는 것도 좋다고 생각돼.
   우선, 재현 불가한 테스트가 보이면 정리해서 알려줘.

---

## 🎯 최신 요구사항 (2024.12.19)

1. **커버리지 목표 상향 조정**: 30% → **100%** (커버할 수 없는 로직 제외)
2. **다른 에이전트 인수인계**: 작업을 이어갈 수 있도록 코드 탐색 순서 정의
3. **현재 작업 상태 명시**: git status 기준으로 이전 작업자 변경사항 명확화
4. **TODO 통합**: 모든 작업 항목을 이 파일에 명시

---

## ⚠️ **새로 발견된 문제: 테스트 행(Hang) 및 예상치 못한 중단**

### 🔍 문제 현상 (2024.12.19 19:30)
```bash
# just coverage 실행 중 행 발생:
ℹ 디스크 /dev/virtual-test에 파티션 생성 중...
/dev/virtual-test1
defaults
^C  # 사용자 강제 중단 필요
```

### 🚨 원인 분석
**🎯 핵심 문제**: scripts/coverage-test.sh → lib/disk-functions.sh → safe_execute() → 실제 시스템 명령어 실행

**🔗 위험한 호출 체인**:
```bash
coverage-test.sh 
→ add_fstab_entry_safe("/dev/virtual-sda", "/mnt/test", ...)
→ create_partition() 
→ safe_execute("parted -s /dev/virtual-sda mkpart ...")
→ 실제 parted 명령어 실행 시도
→ 존재하지 않는 디바이스로 인한 HANG
```

### 📊 개선 방안 및 실현 가능성

#### ✅ **확실히 가능한 개선안**
1. **safe_execute() 함수 개선** (90% 확실)
   - 테스트 모드에서 위험한 명령어 패턴 차단
   - Mock 응답 제공으로 realistic한 결과 시뮬레이션
   - 기존 코드 최소 변경으로 구현 가능

2. **환경 변수 기반 안전 모드** (95% 확실)
   - TESTING_MODE=true 시 모든 위험한 작업 차단
   - DRY_RUN 모드로 명령어 시뮬레이션만 실행
   - 즉시 적용 가능, 부작용 최소

#### 🤔 **실현 가능성 검토 필요 (Pilot Study 대상)**
3. **프로세스 모니터링 시스템** (70% 확실)
   ```bash
   # 개념적 구현:
   - 출력 파일 크기 변화 감지
   - 30초 무응답시 자동 종료
   - 프로세스 트리 강제 정리
   ```
   **의문점**: 
   - bash 환경에서 background 프로세스 모니터링 안정성?
   - bashcov와의 상호작용 문제 없을지?
   - 실제 hang vs 정상적 긴 작업 구분 가능?

4. **위험한 명령어 동적 감지** (60% 확실)
   ```bash
   # 패턴 매칭으로 스크립트 사전 검사
   dangerous_patterns=("parted.*mkpart" "mkfs\." "dd.*of=/dev/")
   ```
   **의문점**:
   - 정규식 패턴 매칭의 정확도?
   - 거짓 양성/음성 비율은?
   - 성능 오버헤드는?

5. **대화형 입력 완전 차단** (80% 확실)
   ```bash
   exec 0</dev/null
   export DEBIAN_FRONTEND=noninteractive
   ```
   **의문점**:
   - 모든 대화형 시나리오 커버 가능?
   - 일부 명령어에서 우회 방법 존재?

#### ❓ **고급 기능 (실현 가능성 미지수)**
6. **Namespace 기반 샌드박스** (30% 확실)
   - mount namespace로 /dev 격리
   - 가상 블록 디바이스 생성
   - 복잡성 높음, 권한 문제 예상

7. **실시간 시스템 호출 인터셉트** (10% 확실)
   - strace 기반 모니터링
   - LD_PRELOAD 트릭 사용
   - 매우 복잡, 안정성 의문

### 🧪 **Pilot Study 계획**

#### Phase A: 기본 안전 모드 (1시간)
- [ ] safe_execute() 함수에 TESTING_MODE 체크 추가
- [ ] 위험한 명령어 패턴 5개 차단 테스트
- [ ] coverage-test.sh에서 안전 모드 활성화

#### Phase B: 프로세스 모니터링 (2시간)  
- [ ] 간단한 프로세스 모니터링 함수 구현
- [ ] 30초 타임아웃 테스트
- [ ] bashcov와의 상호작용 확인

#### Phase C: 동적 위험 감지 (1시간)
- [ ] 스크립트 사전 검사 함수 구현
- [ ] 10개 위험 패턴으로 테스트
- [ ] 거짓 양성/음성 비율 측정

### 🎯 **성공 지표**
- ✅ coverage 명령어가 hang 없이 완료
- ✅ 실제 시스템 변경 0건
- ✅ 커버리지 측정 정확도 유지
- ✅ 기존 테스트 통과율 100% 유지

---

## 📊 현재 프로젝트 상태 (2024.12.19 19:14)

### Git 작업 상태
```bash
# git status: 깨끗함 (모든 변경사항 커밋됨)
# 최근 커밋 히스토리:
e871910 feat: 주요 테스트 파일에서 더미 모킹 완전 제거 달성
09023e7 feat: 누락된 함수 구현 및 실제 환경 테스트 100% 성공 달성  
a2382f2 feat: 테스트 신뢰성 분석 및 개선 시스템 구축
7d9f8ab feat: Mock 환경 확장 및 커버리지 1% 돌파 달성
ff26541 feat: API 모듈 통합 테스트 시스템 구축
```

### 프로젝트 구조
```
ubuntu-disk-toolkit/
├── lib/            (12개 파일, 7,000+ 라인)
├── bin/            (5개 파일, 1,800+ 라인)  
├── tests/          (9개 파일, 3,600+ 라인)
├── scripts/        (coverage-test.sh 등)
├── config/         (설정 파일들)
└── coverage/       (HTML 리포트)
```

### 성능 지표
- **코드 커버리지**: 13.88% (538/3877 라인) - 급감 원인: API 모듈 추가
- **테스트 실행 시간**: 10.5초 (128분에서 99% 단축)
- **테스트 통과율**: 100%
- **발견된 신뢰성 문제**: 82개 + 1개 (테스트 행)

---

## 🗺️ 코드 탐색 순서 (다른 에이전트용)

### 1단계: 프로젝트 이해 (30분)
```bash
# 1. 프로젝트 개요 파악
cat README.md
cat justfile | grep -A5 -B5 "test\|coverage\|lint"

# 2. 현재 문제 상황 파악  
cat TESTING_RELIABILITY_ANALYSIS.md
cat todo.txt
```

### 2단계: 핵심 파일 탐색 순서 (1시간)
```bash
# A. 테스트 시스템 파악
tests/run-tests.sh           # 테스트 실행기
tests/test_helpers.bash      # 헬퍼 함수들 (1,308라인 - 가장 중요)
tests/test_real_environment.bats  # 신뢰할 수 있는 테스트 기준

# B. 핵심 라이브러리 (의존성 순서)
lib/common.sh               # 기본 유틸리티 (333라인) ⚠️ safe_execute() 위치
lib/ui-functions.sh         # UI 함수들 (375라인)
lib/validator.sh            # 검증 로직 (525라인)
lib/system-functions.sh     # 시스템 정보 (497라인)

# C. 비즈니스 로직
lib/id-resolver.sh          # ID 해석 (379라인)
lib/disk-functions.sh       # 디스크 관리 (433라인) ⚠️ create_partition() 위치
lib/fstab-functions.sh      # fstab 관리 (733라인)
lib/raid-functions.sh       # RAID 관리 (568라인)
lib/fail-safe.sh           # 안전장치 (532라인)

# D. API 레이어 (가장 복잡)
lib/disk-api.sh            # 디스크 API (806라인)
lib/fstab-api.sh           # fstab API (801라인) 
lib/raid-api.sh            # RAID API (1,015라인)

# E. 문제 발생 지점
scripts/coverage-test.sh    # ⚠️ 행 발생 위치 (라인 556 근처)
```

### 3단계: 문제가 있는 테스트 파일들 (우선순위순)
```bash
# 치명적 문제 (즉시 수정 필요)
tests/test_api_integration.bats  # 60개 관대한 exit code 검증
tests/test_disk.bats            # 논리적 모순 테스트 포함
tests/test_integration.bats     # 논리적 모순 테스트 포함

# 심각한 문제 (1주일 내)
tests/test_fstab.bats          # 더미 테스트들
tests/test_system.bats         # 환경 의존성 문제
tests/test_common.bats         # 불필요한 모킹
```

### 4단계: 실행 파일들 (마지막)
```bash
bin/ubuntu-disk-toolkit        # 메인 CLI (493라인)
bin/manage-disk               # 디스크 관리 (636라인)  
bin/manage-fstab              # fstab 관리 (336라인)
bin/check-system              # 시스템 체크 (191라인)
bin/check-disk-health         # 디스크 상태 (142라인)
```

---

## 🔥 발견된 문제 종합 분석 (2024.12.19)

### 🚨 문제 우선순위별 분류

#### 🔴 치명적 (즉시 수정) - 63개 (1개 추가)
1. **논리적 모순 테스트** (2개)
   - tests/test_disk.bats:429-433
   - tests/test_integration.bats:331
   - 항상 참인 조건으로 실제 검증 없음

2. **과도하게 관대한 Exit Code 검증** (60개+)
   - tests/test_api_integration.bats: 25개 (exit code 0 또는 127 모두 허용)
   - tests/test_fstab.bats: 4개 (모든 실패 허용)
   - tests/test_system.bats: 5개 (성공/실패 구분 없음)
   - tests/test_disk.bats: 8개
   - tests/test_common.bats: 2개
   - tests/test_real_environment.bats: 2개

3. **테스트 행(Hang) 문제** (1개) ⚠️ **신규 추가**
   - scripts/coverage-test.sh: 위험한 시스템 명령어 실행으로 인한 행
   - lib/common.sh safe_execute(): 테스트 모드 구분 없이 실제 명령어 실행

#### 🟠 심각한 (1주일 내) - 15개
3. **더미 테스트 (불필요한 모킹)** (15개)
   - tests/test_api_integration.bats: setup_mocks 사용
   - tests/test_helpers.bash: 19개 모킹 함수 중 불필요한 것들

4. **환경 의존성 문제** (12개)
   - 하드코딩된 /dev/loop0, /dev/loop1 의존성
   - lsblk, findmnt 명령어 존재 여부 의존성

#### 🟡 중간 (1개월 내) - 5개
5. **타임아웃 남용** (5개)
   - scripts/coverage-test.sh: UI 함수 타임아웃
   - tests/test_real_environment.bats: 성능 테스트 타임아웃

6. **커버리지 급락 문제**
   - 현재: 13.88% (538/3877), 이전: 27.19%
   - 원인: API 모듈 추가로 전체 라인 수 3배 증가
   - 목표: 100% (커버할 수 없는 로직 제외)

### 🔍 재현 가능 vs 재현 불가능 테스트 분류

#### ✅ 재현 가능 (임시 파일/실제 명령 권장)
- fstab 파일 조작 테스트 → 임시 파일 사용
- lsblk, blkid 파싱 테스트 → 실제 시스템 명령어 사용
- 디스크 존재 확인 → 동적 디바이스 발견

#### ⚠️ 재현 불가능 (모킹/샌드박스 필요)
- RAID 하드웨어 장애 시뮬레이션
- 디스크 I/O 오류 시뮬레이션
- 파티션 삭제/포맷 등 위험한 작업

---

## 📅 통합 작업 계획 (TODO)

### Phase 0: 테스트 행 문제 해결 (반나절) - **🔥 최우선**
- [ ] **Pilot Study A: 기본 안전 모드** (1시간)
  - lib/common.sh safe_execute() 함수에 TESTING_MODE 체크 추가
  - 위험한 명령어 패턴 5개 차단 (parted, mkfs, dd, shred, mdadm)
  - scripts/coverage-test.sh에 안전 환경변수 설정

- [ ] **Pilot Study B: 프로세스 모니터링** (2시간)
  - 간단한 프로세스 출력 모니터링 함수 구현
  - 30초 타임아웃으로 자동 종료 테스트
  - bashcov와의 상호작용 안정성 확인

- [ ] **Pilot Study C: 동적 위험 감지** (1시간)
  - 스크립트 사전 검사로 위험한 패턴 탐지
  - 거짓 양성/음성 비율 측정
  - 실용성 평가

### Phase 1: 치명적 문제 해결 (1일) - 우선순위 1
- [ ] **논리적 모순 테스트 2개 수정**
  - tests/test_disk.bats:429-433의 `[[ "$status" -ne 0 ]] || [[ "$status" -eq 0 ]]` 제거
  - tests/test_integration.bats:331의 무의미한 검증 조건 수정

- [ ] **Exit code 127 허용 문제 25개 수정**
  - tests/test_api_integration.bats에서 함수 존재 확인 후 테스트 실행
  - `command -v function_name` 체크 추가

- [ ] **무의미한 검증 조건 35개 수정**
  - tests/test_fstab.bats, test_system.bats의 과도하게 관대한 검증 제거
  - 명확한 성공/실패 조건 적용

### Phase 2: 더미 테스트 개선 (3일) - 우선순위 2
- [ ] **test_api_integration.bats에서 setup_mocks 제거**
  - 임시 파일과 실제 명령어로 전환
  - fstab 조작, 디스크 정보 파싱을 실제 환경에서 테스트

- [ ] **재현 가능한 더미 테스트 15개 개선**
  - fstab 파일 조작 → 임시 파일 사용
  - lsblk, blkid 파싱 → 실제 시스템 명령어 사용
  - 디스크 존재 확인 → 동적 디바이스 발견

### Phase 3: 환경 독립성 확보 (1주일) - 우선순위 3
- [ ] **하드코딩된 디바이스 경로 12개 변경**
  - /dev/loop0, /dev/loop1 → 동적 발견으로 변경
  - `lsblk -n -d -o NAME | head -1` 패턴 사용

- [ ] **명령어 존재 여부 확인 후 테스트 실행**
  - lsblk, findmnt 등 시스템 명령어 의존성 해결
  - `command -v` 체크 후 skip 또는 실행

- [ ] **커버리지 100% 달성** (커버할 수 없는 로직 제외)
  - 현재: 13.88% (538/3877)
  - API 모듈들의 미테스트 함수들 식별 및 테스트 추가
  - 커버리지 측정 안정화

### Phase 4: 고급 기능 (1개월) - 우선순위 4
- [ ] **타임아웃 남용 5개 제거**
  - scripts/coverage-test.sh의 UI 함수 타임아웃 → 근본 원인 해결
  - tests/test_real_environment.bats 성능 테스트 → 적절한 성능 지표 도입

- [ ] **재현 불가능한 케이스용 제한적 샌드박스 구현**
  - RAID 하드웨어 장애 시뮬레이션
  - 디스크 I/O 오류 시뮬레이션  
  - mount namespace 격리

- [ ] **bash 프로젝트 규칙 문서 작성**
  - 작업 히스토리 기반 지침 문서 작성
  - 표준 규정 v2.0 적용

---

## 🎯 성공 지표

### 단기 목표 (1주일)
- [ ] 테스트 행 문제 완전 해결 (just coverage 무한정 대기 없음)
- [ ] 치명적 문제 63개 완전 해결
- [ ] 더미 테스트 15개 실제 환경 테스트로 전환
- [ ] 거짓 양성 0개 달성

### 중기 목표 (1개월)  
- [ ] 커버리지 100% 달성 (커버할 수 없는 로직 제외)
- [ ] 환경 의존성 문제 완전 해결
- [ ] 모든 환경에서 일관된 테스트 결과

### 장기 목표 (3개월)
- [ ] 재현 불가능한 케이스용 샌드박스 완성
- [ ] bash 프로젝트 표준 문서 완성
- [ ] CI/CD 통합 및 신뢰도 향상

---

## 🚀 다음 작업자를 위한 시작 명령어

```bash
# 1. 현재 상태 확인
cd /home/devcomfort/ubuntu-disk-toolkit
git status && git log --oneline -5

# 2. 테스트 행 문제 재현 (주의: 강제 중단 필요할 수 있음)
# just coverage  # ⚠️ 실행하지 말고 코드만 확인

# 3. 가장 긴급한 문제부터 시작
grep -n "\[\[.*\$status.*-ne 0.*\]\].*\|\|.*\[\[.*\$status.*-eq 0.*\]\]" tests/*.bats

# 4. 행 문제 원인 파악
grep -n "add_fstab_entry_safe\|create_partition" scripts/coverage-test.sh
grep -n "safe_execute.*parted" lib/*.sh

# 5. Pilot Study 시작
echo "🧪 Pilot Study A: 기본 안전 모드 구현 시작"
```

**⚠️ 중요**: 
- 모든 변경사항은 기능 단위로 커밋하고, 테스트가 100% 통과하는 상태를 유지하세요.
- 테스트 행 문제가 최우선이므로 Phase 0부터 시작하세요.
- Pilot Study 결과에 따라 실현 가능성을 재평가하세요.